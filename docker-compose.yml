version: "3.8"

services:
    elastic:
        container_name: elastic
        build:
            context: .
            dockerfile: elastic.Dockerfile
        image: elastic
        # environment:
        #     discovery.type: single-node
        # ports:
        #     - 9200:9200
        #     - 9300:9300
        networks:
            flask_blog:
                aliases:
                    - elastic


    postgres:
        container_name: postgres
        image: postgres:12-alpine
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - postgres-db:/var/lib/postgresql/data
        networks:
            flask_blog:
                aliases:
                    - postgres

    flask:
        build: .
        container_name: flask_app
        image: flask_app
        ports:
            - 5000:5000
            - 5678:5678 # here for debugging
        restart: always
        environment:
            ADMINS: ${ADMINS}
            FLASK_APP: ${FLASK_APP}
            FLASK_ENV: ${FLASK_ENV}
            MAIL_SERVER: ${MAIL_SERVER}
            MAIL_PORT: ${MAIL_PORT}
            MAIL_USE_TLS: ${MAIL_USE_TLS}
            MAIL_USERNAME: ${MAIL_USERNAME}
            MAIL_PASSWORD: ${MAIL_PASSWORD}
            MS_TRANSLATOR_KEY: ${MS_TRANSLATOR_KEY}
            DATABASE_URL: ${DATABASE_URL}
            ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
        volumes:
            - .:/app
        networks:
            flask_blog:
        command: ["./boot.sh"]

#     redis:
#         image: redis
#         container_name: redis_cache
#         networks:
#             flask_blog:
#                 aliases:
#                     - redis
#         volumes:
#             - redis-cache:/var/lib/redis/data

volumes:
    postgres-db:
    # redis-cache:

networks:
    flask_blog:
        driver: bridge
